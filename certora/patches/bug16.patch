diff --git a/contracts/RewardsManager.sol b/contracts/RewardsManager.sol
index 7d413ee..5638d9d 100644
--- a/contracts/RewardsManager.sol
+++ b/contracts/RewardsManager.sol
@@ -104,12 +104,13 @@ contract RewardsManager is ReentrancyGuard {
     function accrueVault(uint256 epochId, address vault) public {
         require(epochId <= currentEpoch); // dev: !can only accrue up to current epoch
 
-        (uint256 supply, bool shouldUpdate) = getTotalSupplyAtEpoch(epochId, vault);
+        uint256 supply = totalSupply[epochId][vault];
+        // (uint256 supply, bool shouldUpdate) = getTotalSupplyAtEpoch(epochId, vault);
 
-        if(shouldUpdate) {
-            // Because we didn't return early, to make it cheaper for future lookbacks, let's store the lastKnownBalance
-            totalSupply[epochId][vault] = supply;
-        }
+        // if(shouldUpdate) {
+        //     // Because we didn't return early, to make it cheaper for future lookbacks, let's store the lastKnownBalance
+        //     totalSupply[epochId][vault] = supply;
+        // }
 
         uint256 timeLeftToAccrue = getVaultTimeLeftToAccrue(epochId, vault);
 
@@ -496,11 +497,12 @@ contract RewardsManager is ReentrancyGuard {
     function accrueUser(uint256 epochId, address vault, address user) public {
         require(epochId <= currentEpoch); // dev: !can only accrue up to current epoch
 
-        (uint256 currentBalance, bool shouldUpdate) = getBalanceAtEpoch(epochId, vault, user);
+        uint256 currentBalance = shares[epochId][vault][user];
+        // (uint256 currentBalance, bool shouldUpdate) = getBalanceAtEpoch(epochId, vault, user);
 
-        if(shouldUpdate) {
-            shares[epochId][vault][user] = currentBalance;
-        }
+        // if(shouldUpdate) {
+        //     shares[epochId][vault][user] = currentBalance;
+        // }
 
         // Optimization:  No balance, return early
         if(currentBalance == 0){
