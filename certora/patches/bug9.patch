diff --git a/contracts/RewardsManager.sol b/contracts/RewardsManager.sol
index 7d413ee..199faa0 100644
--- a/contracts/RewardsManager.sol
+++ b/contracts/RewardsManager.sol
@@ -102,7 +102,7 @@ contract RewardsManager is ReentrancyGuard {
     /// @notice You need to accrue a vault before you can claim it's rewards
     /// @notice You can accrue
     function accrueVault(uint256 epochId, address vault) public {
-        require(epochId <= currentEpoch); // dev: !can only accrue up to current epoch
+        // require(epochId <= currentEpoch); // dev: !can only accrue up to current epoch
 
         (uint256 supply, bool shouldUpdate) = getTotalSupplyAtEpoch(epochId, vault);
 
@@ -211,7 +211,7 @@ contract RewardsManager is ReentrancyGuard {
     /// @notice Anyone can claim on behalf of others
     /// @notice Gas savings is fine as public / external matters only when using mem vs calldata for arrays
     function claimReward(uint256 epochId, address vault, address token, address user) public {
-        require(epochId < currentEpoch); // dev: !can only claim ended epochs
+        // require(epochId < currentEpoch); // dev: !can only claim ended epochs
 
         accrueUser(epochId, vault, user);
         accrueVault(epochId, vault);
@@ -254,7 +254,7 @@ contract RewardsManager is ReentrancyGuard {
         //  you may as well use the optimized version to save more gas
         require(epochStart <= epochEnd); // dev: epoch math wrong
         uint256 tokensLength = tokens.length;
-        require(epochEnd < currentEpoch); // dev: Can't claim if not expired
+        // require(epochEnd < currentEpoch); // dev: Can't claim if not expired
         _requireNoDuplicates(tokens);
 
         uint256[] memory amounts = new uint256[](tokens.length); // We'll map out amounts to tokens for the bulk transfers
@@ -311,7 +311,7 @@ contract RewardsManager is ReentrancyGuard {
         uint256 tokensLength = tokens.length;
         address user = msg.sender; // Pay the extra 3 gas to make code reusable, not sorry
         // NOTE: We don't cache currentEpoch as we never use it again
-        require(epochEnd < currentEpoch); // dev: epoch math wrong 
+        // require(epochEnd < currentEpoch); // dev: epoch math wrong 
         _requireNoDuplicates(tokens);
 
         // Claim the tokens mentioned
@@ -494,7 +494,7 @@ contract RewardsManager is ReentrancyGuard {
     /// @notice Figure out their points (their current balance) (before we update)
     /// @notice Just multiply the points * the time, those are the points they've earned
     function accrueUser(uint256 epochId, address vault, address user) public {
-        require(epochId <= currentEpoch); // dev: !can only accrue up to current epoch
+        // require(epochId <= currentEpoch); // dev: !can only accrue up to current epoch
 
         (uint256 currentBalance, bool shouldUpdate) = getBalanceAtEpoch(epochId, vault, user);
 
